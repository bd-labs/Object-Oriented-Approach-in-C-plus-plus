///////////////////////////////////////////////////////////////////////////////
// Joe Waclawski
// CIS 554
// Shape
//
// Description: Implementation of class Shape. See Shape.h for details
//
///////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include "Shape.h"

using std::cout;
using std::cin;
using std::endl;


///////////////////////////////////////////////////////////////////////////////
// Shape default constructor
///////////////////////////////////////////////////////////////////////////////
Shape::Shape()
// initialize default rectangle attributes
: fs(WINDOW_MAXX, WINDOW_MAXY),
  borderWidth(DEFAULT_PEN_WIDTH),
  borderColor(BLUE),
  fillColor(RED)

{
	position.x=GetWindowWidth()/2;
	position.y=GetWindowHeight()/2;
}

///////////////////////////////////////////////////////////////////////////////
// Shape::SetBorderColor()
///////////////////////////////////////////////////////////////////////////////
bool Shape::SetBorderColor(SHAPE_COLOR color)
{
	borderColor = color;
	return true;
}

///////////////////////////////////////////////////////////////////////////////
// Shape::SetFillColor()
///////////////////////////////////////////////////////////////////////////////
bool Shape::SetFillColor(SHAPE_COLOR color)
{
	fillColor = color;
	return true;
}

///////////////////////////////////////////////////////////////////////////////
// Shape::GetWindowWidth()
///////////////////////////////////////////////////////////////////////////////
unsigned int Shape::GetWindowWidth()
{
	return WINDOW_MAXX-4; // account for window border
}

///////////////////////////////////////////////////////////////////////////////
// Shape::GetWindowHeight()
///////////////////////////////////////////////////////////////////////////////
unsigned int Shape::GetWindowHeight()
{
	return WINDOW_MAXY-28; // account for size of window banner
}

///////////////////////////////////////////////////////////////////////////////
// Shape::GetPosition()
///////////////////////////////////////////////////////////////////////////////
POINT Shape::GetPosition()
{
	return position;
}

///////////////////////////////////////////////////////////////////////////////
// Shape::ClearScreen()
///////////////////////////////////////////////////////////////////////////////
bool Shape::ClearScreen()
{
	fs.ClearScreen();
	return true;
}
